#include <windows.h>
#include "stdafx.h"


LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
HINSTANCE g_hInst;
LPCTSTR lpszClass = TEXT("First");  //윈도우 이름 및 타이틀바에 등록할 문자열
HWND g_hWnd;



#define OrgFile_F "c:\\windows\\temp\\test"
#define CopyFile_F "c:\\windows\\temp\\test2"


DWORD CALLBACK CopyProgressRoutine(LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);


int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;

	g_hInst = hInstance;

	//------------ 아래 부분은 윈도우 클래스를 설정해주는 것이다. --------------------

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;
	WndClass.lpfnWndProc = WndProc;
	WndClass.lpszClassName = lpszClass;
	WndClass.lpszMenuName = NULL;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;

	//------------ 위 부분은 윈도우 클래스를 설정해주는 것이다. --------------------

	RegisterClass(&WndClass);   //  <-- 여기서는 위에서 설정한 클래스를 등록한다.

	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
		CW_USEDEFAULT, NULL, (HMENU)NULL, hInstance, NULL);   // 설정하고 등록한 윈도우를 생성한다.

	ShowWindow(hWnd, nCmdShow);   //생성한 윈도우를 출력..(이 함수를 호출하지않으면 윈도우가 보이지 않는다.)

	while (GetMessage(&Message, NULL, 0, 0))   //사용자가 종료하기 전까지 반복해서 메세지 처리를 호출한다.
	{
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}

	return (int)Message.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam) //여기서 실제로 메시지를 처리한다.
{
	static BOOL bCancel = FALSE;

	switch (iMessage)
	{
	case WM_CREATE:
		SetWindowText(hWnd, TEXT("마우스 왼쪽버튼을 누르면 파일 복사시작"));
		g_hWnd = hWnd;
		return 0;

	case WM_LBUTTONDOWN:
		SetCursor(LoadCursor(NULL, IDC_WAIT));
		if (CopyFileExA(OrgFile_F, CopyFile_F, CopyProgressRoutine, NULL, &bCancel, 0) == TRUE)
			MessageBoxA(0, "CopyFileEx Success!!", "OK", MB_OK);
		else
			MessageBoxA(0, "CopyFileEx False!!", "OK", MB_OK);

		SetCursor(LoadCursor(NULL, IDC_ARROW));
		return 0;

	case WM_DESTROY:

		PostQuitMessage(0);
		return 0;
	}

	return DefWindowProc(hWnd, iMessage, wParam, lParam);  //프로그래머가 처리하지 않은 나머지 동작을 기본처리로 넘긴다.
}


DWORD CALLBACK CopyProgressRoutine(LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData)
{
	TCHAR str[512] = { 0 };
	wsprintf(str, TEXT("%d중 %d바이트 복사중"), TotalFileSize.LowPart, TotalBytesTransferred.LowPart);
	SetWindowText(g_hWnd, str);
	return PROGRESS_CONTINUE;
}